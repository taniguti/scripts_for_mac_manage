#!/bin/bash
# vim: set ts=4 sw=4 sts=0 et ft=sh fenc=utf-8 ff=unix :
# https://github.com/taniguti/scripts_for_mac_manage/blob/master/LICENSE

shlogger() {
    local logfile scriptname timestamp label mode
    scriptname="$(/usr/bin/basename "$0")"
    logfile="/var/tmp/${scriptname}.log"
    timestamp="$(/bin/date "+%F %T")"
    mode="$2"
    case "${mode:-1}" in
        2)
            label="[error]"
            echo "$timestamp $scriptname $label $1" | /usr/bin/tee -a "$logfile" >&2
            ;;
        *)
            label="[info]"
            echo "$timestamp $scriptname $label $1" | /usr/bin/tee -a "$logfile"
            ;;
    esac
}

InstallCommandLineTools() {
    local flag items opt kernelMajorVer cmdlinetoolpath

    shlogger "Prepare getting command line tools..."
    flag="/tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress"
    /usr/bin/touch "$flag"

    shlogger "Check command line tools list"
    kernelMajorVer="$(/usr/bin/uname -r | /usr/bin/awk -F. '{print $1}')"
    # macOS 10.15 or later (Kernel Major version 19 or bigger)
    #Software Update Tool
    #
    #Finding available software
    #Software Update found the following new or updated software:
    #* Label: Command Line Tools for Xcode-11.3
    #	Title: Command Line Tools for Xcode, Version: 11.3, Size: 224878K, Recommended: YES,
    #* Label: Command Line Tools for Xcode-11.0
    #	Title: Command Line Tools for Xcode, Version: 11.0, Size: 224978K, Recommended: YES,

    # macOS 10.14 or earlier (Kernel Major version 18 or smaller)
    #Software Update Tool
    #
    #Finding available software
    #Software Update found the following new or updated software:
    #   * Command Line Tools (macOS Mojave version 10.14) for Xcode-10.3
    #	Command Line Tools (macOS Mojave version 10.14) for Xcode (10.3), 199250K [recommended]

    items="$(/usr/bin/mktemp)"

    if [ "$kernelMajorVer" -ge 19 ]; then
        /usr/sbin/softwareupdate --list --recommended \
            | /usr/bin/grep "\* Label: Command Line Tools" \
            | /usr/bin/cut -c 10- >"$items"
    else
        /usr/sbin/softwareupdate --list --recommended \
            | /usr/bin/grep "\* Command Line Tools" \
            | /usr/bin/cut -c 6- >"$items"
    fi

    if [ ! -s "$items" ]; then
        shlogger "Not found Command line tools." 2
        /bin/rm -f "$items" "$flag"
        exit 0
    fi

    if [ "$(/usr/sbin/softwareupdate --help 2>&1 | /usr/bin/grep -c 'agree-to-license')" != 0 ]; then
        opt="--agree-to-license"
    else
        opt=""
    fi

    while read -r item; do
        shlogger "Install: $item"
        /usr/sbin/softwareupdate "$opt" --verbose --install "$item"
        cmdlinetoolpath="$(/usr/bin/xcode-select -p 2>/dev/null)"
        if [ -n "$cmdlinetoolpath" ]; then
            break
        fi
    done <"$items"
    /bin/rm -f "$flag" "$items"

    shlogger "Active developer directory: ${cmdlinetoolpath:-None}"
    shlogger "Done."
}

xcodeCommandLineToolsPath="$(/usr/bin/xcode-select -p 2>/dev/null)"
if [ -z "$xcodeCommandLineToolsPath" ]; then
    shlogger "xcodeCommandLineToolsPath is not set."
    InstallCommandLineTools
elif [ ! -d "$xcodeCommandLineToolsPath" ]; then
    shlogger "xcodeCommandLineToolsPath is set but it doesn't exist."
    InstallCommandLineTools
elif [ ! -x "${xcodeCommandLineToolsPath}/usr/bin/git" ]; then
    shlogger "Not found: ${xcodeCommandLineToolsPath}/usr/bin/git"
    InstallCommandLineTools
else
    shlogger "xcodeCommandLineToolsPath: ${xcodeCommandLineToolsPath:-NULL}"
    shlogger "No need install command line tool."
fi

exit 0
