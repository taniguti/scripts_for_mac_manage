#!/bin/bash
#-
#- install-firefox
#-  Install or update Firefox via JamfPro policy.
#-
#- Usage:

# Default Language Pack
defaultLangPackage="ja-JP"

# Show help.
if [ $# -eq 0 ]; then
    /usr/bin/grep ^#- "$0" | cut -c 4-
    exit 0
fi

function checkLang(){
    local givenLang defaultLang
    defaultLang="$1"
    givenLang="$2"

    if [ -z "$givenLang" ]; then
        givenLang="$defaultLang"
    fi
    if [ "$givenLang" = 'ja-JP' ]; then
        givenLang='ja-JP-mac'
    fi
    if [ "$defaultLang" = 'ja-JP' ]; then
        defaultLang='ja-JP-mac'
    fi

    if [ "$( /usr/bin/curl -s "https://www.mozilla.org/en-US/firefox/all/" | \
        /usr/bin/grep "firefox-latest" | \
        /usr/bin/grep 'os=osx'| \
        /usr/bin/awk -F\" '{print $2}'| \
        /usr/bin/awk -F= '{print $NF}' |
        /usr/bin/awk -v L="$givenLang" '$0 == L' | \
        /usr/bin/wc -l )" -eq 1 ]; then
        echo "$givenLang"
    else
        echo "$defaultLang"
    fi
}

function checkApp(){
    local PathToApp DeveloperId IsSigned DEVID ROOTCA APPLEROOTCA TeamIdentifier
    PathToApp="$1"
    DeveloperId="$2"

    if [ -x "/usr/local/bin/santactl" ]; then
        IsSigned="$( /usr/local/bin/santactl fileinfo --key Code-signed "$PathToApp" )"
        if [ "$IsSigned" != "Yes" ]; then
            echo "$PathToApp is not code-signed."
            return 1
        fi

        DEVID="$( /usr/local/bin/santactl fileinfo --cert-index 1 --key "Organizational Unit" "$PathToApp" )"
        if [ "$DEVID" != "$DeveloperId" ]; then
            echo "$PathToApp: Developer ID is $DEVID. But it must be $DeveloperId."
            return 1
        fi

        ROOTCA="$( /usr/local/bin/santactl fileinfo --cert-index -1 --key SHA-256 "$PathToApp" )"
        APPLEROOTCA="$( /usr/local/bin/santactl fileinfo --cert-index -1 --key SHA-256 /System/Library/CoreServices/Finder.app )"
        if [ "$ROOTCA" != "$APPLEROOTCA" ]; then
            echo "$PathToApp: ROOT CA of code-signing is not match."
            return 1
        fi
    elif [ -x /usr/bin/codesign ]; then
        TeamIdentifier="$( /usr/bin/codesign --verify --verbose --display "$PathToApp" 2>&1 | /usr/bin/awk -F= '$1 == "TeamIdentifier" {print $2}' )"
        if [ "$TeamIdentifier" != "$DeveloperId" ]; then
            echo "$PathToApp: TeamIdentifier is $TeamIdentifier. But it must be $DeveloperId."
            return 1
        fi
    else
        echo "No tool for ckeck $PathToApp here. Checking is abort."
        return 1
    fi

    # Application's code signing check is passwd.
    echo 'ok'
    return 0
}

function shLogger(){
    local logfile scriptname timestamp label mode
    scriptname="$( /usr/bin/basename "$0" )"
    timestamp="$( /bin/date "+%F %T" )"
    logfile="/tmp/${scriptname}.log"
    mode="$2"
    case "${mode:-1}" in
        2 )
            label="[error]"
            echo "$timestamp $scriptname $label $1" | /usr/bin/tee -a "$logfile" >&2
            ;;
        * )
            label="[info]"
            echo "$timestamp $scriptname $label $1" | /usr/bin/tee -a "$logfile"
            ;;
    esac
}

# Set Language package
#- Parameter 4: Language Package of Firefox.app. ja-JP (default) / en-US etc
shLogger "Given Language: ${4:-"N/A"}"
shLogger "Default Language: $defaultLangPackage"
languagePack="$( checkLang "$defaultLangPackage" "$4" )"
shLogger "Language to install: $languagePack"
if [ "$languagePack" = 'ja-JP-mac' ]; then
    urlLang='ja'
else
    urlLang="$languagePack"
fi

# Force install
#- Parameter 5: Force install: yes / no (default)
forceInstall="$( echo "$5" | tr "[:upper:]" "[:lower:]" )"

# Get the latest version
checkURL="https://www.mozilla.org/${urlLang}/firefox/new/"
latestVersion="$(/usr/bin/curl -s "$checkURL" | \
    /usr/bin/grep 'data-latest-firefox' | \
    /usr/bin/tr "[:blank:]" '\n' | \
    /usr/bin/tr -d '"' | \
    /usr/bin/awk -F= '$1 == "data-latest-firefox" {print $NF}' )"

if [ -z "$latestVersion" ]; then
    shLogger "Failed to get the latest version number of Firefox for $languagePack" 2
    shLogger "Checked URL was $checkURL" 2
    exit 1
fi
shLogger "The latest version number of Firefox($languagePack): $latestVersion"

# Get the version number of installed Firefox.app
if [ -d "/Applications/Firefox.app" ]; then
    installedApp=yes
    currentInstalledVersion="$(/usr/libexec/PlistBuddy -c "print CFBundleShortVersionString" "/Applications/Firefox.app/Contents/Info.plist" 2> /dev/null )"
else
    installedApp=no
    currentInstalledVersion="NotInstalled"
fi

if [ -z "$currentInstalledVersion" ]; then
    shLogger "Failed to get version number from installed application. Something wrong." 2
    exit 1
fi
shLogger "Current version number of installed Firefox.app: $currentInstalledVersion"

if [ "${forceInstall:-no}" = yes ]; then
    shLogger "Force install: $forceInstall"
    currentInstalledVersion="none"
fi

if [ "$currentInstalledVersion" = "$latestVersion" ]; then
    shLogger "The latest version of Firefox is already installed."
    shLogger "Nothing to do. Done."
    exit 0
fi

# Download the latest version
downloadURL="https://download-installer.cdn.mozilla.net/pub/firefox/releases/${latestVersion}/mac/${languagePack}/Firefox%20${latestVersion}.dmg"
shLogger "Download URL: $downloadURL"
workdir="$( /usr/bin/mktemp -d )"
dmgfile="${workdir}/Firefox.dmg"

/usr/bin/curl -s -o "$dmgfile" "$downloadURL"
if [ ! -f  "$dmgfile" ]; then
    shLogger "Failed to download dmg file from $downloadURL" 2
    /bin/rm -rf "$workdir"
    exit 1
fi

devFile="$( /usr/bin/hdiutil attach -nobrowse "$dmgfile" | /usr/bin/grep Firefox | /usr/bin/awk '{print $1}' )"
if [ -z "$devFile" ]; then
    shLogger "Failed to mount disk image from $dmgfile" 2
    /bin/rm -rf "$workdir"
    exit 1
fi

# Check after downloaded
if [ ! -d "/Volumes/Firefox/Firefox.app" ]; then
    shLogger "Not found Firefox.app in /Volumes/Firefox. Something wrong." 2
    /usr/bin/hdiutil detach -quiet "$devFile"
    /bin/rm -rf "$workdir"
    exit 1
fi

DeveloperID="43AQ936H96"
result="$( checkApp "/Volumes/Firefox/Firefox.app" "$DeveloperID" )"
if [ "$result" = ok ]; then
    shLogger "Downloaded Firefox.app: check passed."
else
    shLogger "$result" 2
   /usr/bin/hdiutil detach -quiet "$devFile"
   /bin/rm -rf "$workdir"
   exit 1
fi

# Install or update Firefox
if [ "$installedApp" = yes ]; then
    tempdir="/tmp/$(/usr/bin/uuidgen)"
    /bin/mkdir -p "$tempdir"
    mv "/Applications/Firefox.app" "$tempdir"
fi

/bin/cp -af "/Volumes/Firefox/Firefox.app" "/Applications"
shLogger "Installed Firefox.app into /Applications"
/usr/bin/hdiutil detach -quiet "$devFile"
/bin/rm -rf "$workdir"

/usr/bin/xattr -r -d com.apple.quarantine "/Applications/Firefox.app"
shLogger "Removed com.apple.quarantine from /Applications/Firefox.app"
/usr/sbin/chown -R 0:80 "/Applications/Firefox.app"
shLogger "Fixed owner of Firefox.app"
shLogger "Done."

exit 0
