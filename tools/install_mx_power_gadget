#!/bin/bash
# vim: set ts=2 sw=2 sts=0 et ft=sh fenc=utf-8 ff=unix :

app_web_site="https://www.seense.com/menubarstats/mxpg/"
dl_url="https://www.seense.com/menubarstats/mxpg/updateapp/mxpg.zip"
file_name="$(basename "$dl_url")"
app_name="Mx Power Gadget"
developerid="3EYN7PPTPF"

function shlogger() {
  local logfile scriptname timestamp label mode
  scriptname="$(/usr/bin/basename "$0")"
  logfile="/var/tmp/${scriptname}.log"
  timestamp="$(/bin/date "+%F %T")"
  mode="$2"
  case "${mode:-1}" in
    2)
      label="[error]"
      echo "$timestamp $scriptname $label $1" | /usr/bin/tee -a "$logfile" >&2
      ;;
    *)
      label="[info]"
      echo "$timestamp $scriptname $label $1" | /usr/bin/tee -a "$logfile"
      ;;
  esac
}

function checkapp() {
  local PathToApp DeveloperId IsSigned DEVID ROOTCA APPLEROOTCA TeamIdentifier
  PathToApp="$1"
  DeveloperId="$2"

  if [ -x "/usr/local/bin/santactl" ]; then
    santa_version="$(/usr/local/bin/santactl version | awk '$1 == "santad" {print $3}')"
    checker="/usr/local/bin/santactl version:$santa_version"
    santa_major_version="$(echo "$santa_version" | awk -F. '{print $1}')"
    # https://github.com/google/santa/releases/tag/2022.1
    # PR_no: 713
    if [ "$santa_major_version" -ge 2022 ]; then
      cert_index=0
    else
      cert_index=1
    fi
    IsSigned="$(/usr/local/bin/santactl fileinfo --key Code-signed "$PathToApp")"
    if [ "$IsSigned" != "Yes" ]; then
      shlogger "$PathToApp is not code-signed.($checker)"
      return 1
    fi

    DEVID="$(/usr/local/bin/santactl fileinfo --cert-index "$cert_index" --key "Organizational Unit" "$PathToApp")"
    if [ "$DEVID" != "$DeveloperId" ]; then
      shlogger "$PathToApp: Developer ID is $DEVID. But it must be $DeveloperId.($checker)"
      return 1
    fi

    ROOTCA="$(/usr/local/bin/santactl fileinfo --cert-index -1 --key SHA-256 "$PathToApp")"
    APPLEROOTCA="$(/usr/local/bin/santactl fileinfo --cert-index -1 --key SHA-256 /System/Library/CoreServices/Finder.app)"
    if [ "$ROOTCA" != "$APPLEROOTCA" ]; then
      shlogger "$PathToApp: ROOT CA of code-signing is not match.($checker)"
      return 1
    fi
  elif [ -x /usr/bin/codesign ]; then
    checker="/usr/bin/codesign"
    TeamIdentifier="$(/usr/bin/codesign --verify --verbose --display "$PathToApp" 2>&1 \
      | /usr/bin/awk -F= '$1 == "TeamIdentifier" {print $2}')"
    if [ "$TeamIdentifier" != "$DeveloperId" ]; then
      shlogger "$PathToApp: TeamIdentifier is $TeamIdentifier. But it must be $DeveloperId.($checker)"
      return 1
    fi
  else
    shlogger "No tool for ckeck $PathToApp here. Checking is abort."
    return 1
  fi

  shlogger "Application's code signing check is passed with ${checker}."
  return 0
}

function update_app() {
  local path_to_app developerid app_installed tempdir rc old_app_dir
  path_to_app="$1"
  developerid="$2"
  app_installed="$3"

  tempdir="$(/usr/bin/mktemp -d)"
  /usr/bin/curl --location --silent --fail --output "${tempdir}/${file_name}" "${dl_url}"
  /usr/bin/unzip -qq -d "${tempdir}" "${tempdir}/${file_name}"
  if [ -d "${tempdir}/$(/usr/bin/basename "$path_to_app")" ]; then
    if checkapp "${tempdir}/$(/usr/bin/basename "$path_to_app")" "$developerid"; then
      if [ "$app_installed" = "yes" ]; then
        old_app_dir="$(/usr/bin/mktemp -d)"
        /bin/mv "$path_to_app" "$old_app_dir"
        shlogger "Move old version to $old_app_dir"
      fi
      /bin/mv "${tempdir}/$(/usr/bin/basename "$path_to_app")" "$(/usr/bin/dirname "$path_to_app")/"
      rc=$?
    else
      rc=1
    fi
  else
    shlogger "Not found unzipped app: ${tempdir}/$(/usr/bin/basename "$path_to_app")" 2
    rc=1
  fi
  # /bin/rm -rf "$tempdir"
  return $rc
}

function vercomp() {
  # https://hacknote.jp/archives/18590/
  # 0: $1 = $2 // 1: $1 > $2 // 2: $1 < $2
  local IFS i ver1 ver2
  if [[ "$1" == "$2" ]]; then
    echo 0
    return
  fi

  IFS=.
  # shellcheck disable=SC2206
  ver1=($1)
  # shellcheck disable=SC2206
  ver2=($2)

  # fill empty fields in ver1 with zeros
  for ((i = ${#ver1[@]}; i < ${#ver2[@]}; i++)); do
    ver1[i]=0
  done
  for ((i = ${#ver2[@]}; i < ${#ver1[@]}; i++)); do
    ver2[i]=0
  done
  for ((i = 0; i < ${#ver1[@]}; i++)); do
    if [[ -z ${ver2[i]} ]]; then
      # fill empty fields in ver2 with zeros
      ver2[i]=0
    fi
    if ((10#${ver1[i]} > 10#${ver2[i]})); then
      echo 1
      return
    fi
    if ((10#${ver1[i]} < 10#${ver2[i]})); then
      echo 2
      return
    fi
  done
}

if [ "$(/usr/bin/arch)" != "arm64" ]; then
  shlogger "For Macs with Apple Silicon Only!" 2
  exit 1
fi

if [ "$(/usr/bin/whoami)" != root ]; then
  shlogger "Use with sudo."
  exit 1
fi

app_latest_version="$(/usr/bin/curl --location --silent --fail "${app_web_site}" \
  | tr '<' '\n' | grep "Last update:" | awk '{print $NF}')"

if [ -d "/Applications/${app_name}.app" ]; then
  app_installed=yes
  installed_version="$(/usr/libexec/PlistBuddy -c "print CFBundleShortVersionString" \
    "/Applications/${app_name}.app/Contents/Info.plist" 2>/dev/null)"
fi

if [ "$(vercomp "${installed_version:-0}" "$app_latest_version")" -eq 2 ]; then
  if update_app "/Applications/${app_name}.app" "$developerid" "${app_installed:-no}"; then
    rc=0
    shlogger "${app_name}.app is now updated."
  else
    shlogger "Failed to update of ${app_name}.app."
    rc=1
  fi
else
  shlogger "${app_name}.app is uptodate. Nothing to do."
  rc=0
fi

exit "$rc"
