#!/bin/bash
# vim: set ts=4 sw=4 sts=0 et ft=sh fenc=utf-8 ff=unix :
# https://github.com/taniguti/scripts_for_mac_manage/blob/master/LICENSE
#-
#- deliver-docker [-e] [-f] [-h] [-k ]
#-  e: Install/update Edge version
#-  f: Force re-install/update
#-  h: Show this message.
#-  k: Install/update kitematic.app too
#-
#- If you can use this script via JamfPro. Every values are case in-sensitive.
#-   Parm 4: set "yes" to install Kitematic.app too.
#-   Parm 5: set "edge" to install/update edge release version.
#-   Parm 6: set "yes" to re-install/update in force.
#-

function scriptLogging() {
    # `scriptLogging "your message"` then logging file and put it std-out.
    # `scriptLogging "your message" 2` then logging file and put it std-err.
    # Other than 2 is ignored.
    local logfile scriptname timestamp label mode
    logfile="/tmp/deliver-docker.log"
    scriptname="$( /usr/bin/basename "$0")"
    timestamp="$( /bin/date "+%F %T")"
    mode="$2"
    case "${mode:-1}" in
        2)
            label="[error]"
            echo "$timestamp $scriptname $label $1" | /usr/bin/tee -a "$logfile"
            ;;
        *)
            label="[info]"
            echo "$timestamp $scriptname $label $1" | /usr/bin/tee -a "$logfile"
            ;;
    esac
}

function sinkDocker() {
    scriptLogging "Kill Kitematic anyway. I don not know if it runs now."
    /usr/bin/killall Kitematic 2>/dev/null
    scriptLogging "Sink Docker"
    /usr/bin/killall Docker 2>/dev/null
    scriptLogging "Quit system/com.docker.vmnetd"
    /bin/launchctl kill QUIT system/com.docker.vmnetd 2>/dev/null
    /bin/launchctl unload -w "$plistfile" 2>/dev/null
    scriptLogging "Remove $dockerapp"
    /bin/rm -rf "$dockerapp"
    scriptLogging "Remove Launchd plist file: $plistfile"
    /bin/rm -f "$plistfile"
    scriptLogging "Remove PrivilegedHelperTools: /Library/PrivilegedHelperTools/$( /usr/bin/basename "$dockervmnetd")"
    /bin/rm -f "/Library/PrivilegedHelperTools/$( /usr/bin/basename "$dockervmnetd")"
    for docker_cmd in $( /usr/bin/stat -l /usr/local/bin/* 2>/dev/null  | /usr/bin/grep "$dockerapp" | /usr/bin/awk '{ print $(NF - 2) }'); do
        scriptLogging "remove $docker_cmd"
        /bin/rm -f "$docker_cmd"
    done
}

function killKitematic() {
    scriptLogging "Kill Kitematic"
    /usr/bin/killall Kitematic 2>/dev/null
    scriptLogging "Remove $kitematicapp"
    /bin/rm -rf "$kitematicapp"
}

function checkapp() {
    PathToApp="$1"
    DeveloperId="$2"

    if [ -x "/usr/local/bin/santactl" ]; then
        IsSigned="$( /usr/local/bin/santactl fileinfo --key Code-signed "$PathToApp")"
        if [ "$IsSigned" != "Yes" ]; then
            scriptLogging "$PathToApp is not code-signed." 2
            return 1
        fi

        DEVID="$( /usr/local/bin/santactl fileinfo --cert-index 1 --key "Organizational Unit" "$PathToApp")"
        if [ "$DEVID" != "$DeveloperId" ]; then
            scriptLogging "$PathToApp: Developer ID is $DEVID. But it must be $DeveloperId." 2
            return 1
        fi

        ROOTCA="$( /usr/local/bin/santactl fileinfo --cert-index -1 --key SHA-256 "$PathToApp")"
        APPLEROOTCA="$( /usr/local/bin/santactl fileinfo --cert-index -1 --key SHA-256 /System/Library/CoreServices/Finder.app)"
        if [ "$ROOTCA" != "$APPLEROOTCA" ]; then
            scriptLogging "$PathToApp: ROOT CA of code-signing is not match." 2
            return 1
        fi
    elif [ -x /usr/bin/codesign ]; then
        TeamIdentifier="$( /usr/bin/codesign --verify --verbose --display "$PathToApp" 2>&1 | /usr/bin/awk -F= '$1 == "TeamIdentifier" {print $2}')"
        if [ "$TeamIdentifier" != "$DeveloperId" ]; then
            scriptLogging "$PathToApp: TeamIdentifier is $TeamIdentifier. But it must be $DeveloperId." 2
            return 1
        fi
    else
        scriptLogging "No tool for ckeck $PathToApp here. Checking is abort." 2
        return 1
    fi

    # Application's code signing check is passwd.
    echo 'ok'
    return 0
}

function fixUserConfig() {
    installedver="$1"
    username="$2"
    if [ "$username" = none ]; then
        scriptLogging "Nothing to do for anyone. I do not take care about user config now."
        return 0
    fi

    userDockerGroupConfig="/Users/$username/Library/Group Containers/group.com.docker/settings.json"
    if [ -f "$userDockerGroupConfig" ] \
                                       && [ "$(/usr/bin/python -c 'import sys,json;data=json.loads(sys.stdin.read());print data["channelID"]' <"$userDockerGroupConfig")" = "$installedver" ]; then
        scriptLogging "$userDockerGroupConfig is ok for $installedver."
    else
        scriptLogging "Remove $( /usr/bin/dirname "$userDockerGroupConfig") due to version has changed to $installedver."
        /bin/rm -rf "$( /usr/bin/dirname "$userDockerGroupConfig")"
    fi
}

# Default mode
forced=no
release=stable
install_kitematic=no

# For Jamf support
# Parm $3
currentConsoleUser="$3"
# Parm $4 for kitematic (yes/no)
if [ "$( echo "$4" | /usr/bin/tr "[:upper:]" "[:lower:]")"  = yes  ]; then install_kitematic=yes;  fi
# Parm $5 for Edge (stable/edge)
if [ "$( echo "$5" | /usr/bin/tr "[:upper:]" "[:lower:]")"  = edge ]; then release=edge;  fi
# Parm $6 for force install/update (yes/no)
if [ "$( echo "$6" | /usr/bin/tr "[:upper:]" "[:lower:]")"  = yes  ]; then forced=yes;  fi

while getopts efhk sw; do
    case $sw in
        "e")
            release=edge
            ;;
        "f")
            forced=yes
            ;;
        "k")
            install_kitematic=yes
            ;;
        *)
            /usr/bin/grep ^#- "$0" | /usr/bin/cut -c 4-
            exit 0
            ;;
    esac
done

docker_devid="9BNSXJN65R"
docker_dlurl="https://download.docker.com/mac/${release}/Docker.dmg"
docker_dmg="$( /usr/bin/basename "$docker_dlurl")"
dockerapp=/Applications/Docker.app
dockervmnetd="${dockerapp}/Contents/Library/LaunchServices/com.docker.vmnetd"
dockerplist="${dockerapp}/Contents/Resources/com.docker.vmnetd.plist"
plistfile="/Library/LaunchDaemons/$( /usr/bin/basename "$dockerplist")"

kitematic_dlurl="https://download.docker.com/kitematic/Kitematic-Mac.zip"
kitematic_zip="$( /usr/bin/basename "$kitematic_dlurl")"
kitematicapp=/Applications/Kitematic.app

if [ -z "$currentConsoleUser" ]; then
    currentConsoleUser="$( /usr/bin/stat -l /dev/console | /usr/bin/awk '{print $3}')"
fi
if [ "$currentConsoleUser" = root ] || [ -z "$currentConsoleUser" ]; then
    currentConsoleUser=none
fi

scriptLogging "Force install: $forced"
scriptLogging "Download URL: $docker_dlurl"
scriptLogging "Docker release version: $release"
scriptLogging "Install Kitematic.app: $install_kitematic"
scriptLogging "Download URL: $kitematic_dlurl"
scriptLogging "Current console user: $currentConsoleUser"

if [ "$forced" = yes ]; then sinkDocker; fi
if [ -d "$dockerapp" ]; then
    current_dockerver="$( /usr/libexec/PlistBuddy -c "print CFBundleShortVersionString" "${dockerapp}/Contents/Info.plist")"
    scriptLogging "Current docker version: $current_dockerver"
else
    current_dockerver="X"
    scriptLogging "Install fresh Docker"
fi

workdir="$( /usr/bin/mktemp -d)"
/usr/bin/curl --silent -o "${workdir}/$docker_dmg" "$docker_dlurl"
if [ ! -f "${workdir}/$docker_dmg" ]; then
    scriptLogging "Failed to download $docker_dmg" 2
    /bin/rm -rf "$workdir"
    exit 1
fi

devfile="$( /usr/bin/hdiutil attach -nobrowse "${workdir}/$docker_dmg" | /usr/bin/grep Docker | /usr/bin/awk '{print $1}')"
dmg_dockerver="$( /usr/libexec/PlistBuddy -c "print CFBundleShortVersionString" /Volumes/Docker/Docker.app/Contents/Info.plist 2>/dev/null)"
if [ -z "$dmg_dockerver" ]; then
    scriptLogging "Unknown Type of Docker! Failed to get docker version." 2
    scriptLogging "Abort!" 2
    /bin/rm -rf "$workdir"
    exit 1
fi

if [ "$dmg_dockerver" = "$current_dockerver" ]; then
    scriptLogging "Already same version installed: $current_dockerver"
    scriptLogging "Nothing to do for $dockerapp."
    /usr/bin/hdiutil detach -quiet "$devfile"
else
    result="$( checkapp "/Volumes/Docker/Docker.app" "$docker_devid")"
    if [ "$result" = ok ]; then
        scriptLogging "Docker.app: check passed."
    else
        scriptLogging "$result" 2
        /usr/bin/hdiutil detach -quiet "$devfile"
        /bin/rm -rf "$workdir"
        exit 1
    fi
    if [ "$forced" = no ]; then
        sinkDocker
    fi

    scriptLogging "Install Docker version: $dmg_dockerver"
    scriptLogging "Copy Docker into /Applications"
    /bin/cp -af /Volumes/Docker/Docker.app "$dockerapp"
    /usr/bin/hdiutil detach -quiet "$devfile"
    scriptLogging "Remove com.apple.quarantine from $dockerapp"
    /usr/bin/xattr -r -d com.apple.quarantine "$dockerapp"
    scriptLogging "Fix ownership"
    /usr/sbin/chown -R 0:80 "$dockerapp"

    if [ -f "$dockerplist" ]; then
        scriptLogging "Copy $dockerplist to $plistfile"
        /bin/cp -af "$dockerplist" "$plistfile"

        scriptLogging "Check if there is vmnetd version in plist. This is very important."
        plist_dockervmnetd_ver="$( /usr/libexec/PlistBuddy -c "print Version" "$plistfile" 2>/dev/null)"
        info_dockervmnetd_ver="$( /usr/libexec/PlistBuddy -c "print VmnetdVersion" "${dockerapp}/Contents/Info.plist" 2>/dev/null)"
        scriptLogging "plist_dockervmnetd_ver: $plist_dockervmnetd_ver"
        scriptLogging "info_dockervmnetd_ver: $info_dockervmnetd_ver"
        if [ -z "$plist_dockervmnetd_ver" ]; then
            if [ -z "$info_dockervmnetd_ver" ]; then
                scriptLogging "Unknown Type of Docker! Failed to get version of com.docker.vmnetd." 2
                scriptLogging "Abort!" 2
                /bin/rm -rf "$workdir"
                exit 1
            fi
            scriptLogging "Set $info_dockervmnetd_ver into $plistfile"
            /usr/libexec/PlistBuddy -c "add Version string $info_dockervmnetd_ver" "$plistfile"
        elif [ "$plist_dockervmnetd_ver" != "$info_dockervmnetd_ver" ]; then
            scriptLogging "Update $info_dockervmnetd_ver into $plistfile"
            /usr/libexec/PlistBuddy -c "set Version string $info_dockervmnetd_ver" "$plistfile"
        fi

        scriptLogging "Fix file mode to 644 : $plistfile"
        /bin/chmod 644 "$plistfile"
        scriptLogging "Fix ownership (0:0): $plistfile"
        /usr/sbin/chown 0:0 "$plistfile"
        scriptLogging "Convert Apple binary: $plistfile"
        /usr/bin/plutil -convert binary1 "$plistfile"
    else
        scriptLogging "Cancel to aboard. Not boarding pass($dockerplist) found." 2
        /bin/rm -rf "$workdir"
        exit 1
    fi

    /bin/mkdir -p /usr/local/bin /Library/PrivilegedHelperTools
    if [ -f "$dockervmnetd" ]; then
        scriptLogging "Copy $dockervmnetd into /Library/PrivilegedHelperTools/"
        /bin/cp -af "$dockervmnetd" /Library/PrivilegedHelperTools/
    else
        scriptLogging "Unknown Type of Docker! Not found $dockervmnetd" 2
        scriptLogging "Abort!" 2
        /bin/rm -rf "$workdir"
        exit 1
    fi

    fixUserConfig "$release" "$currentConsoleUser"

    /bin/launchctl load -w "$plistfile"
    vmnetd_status="$( /bin/launchctl print system/com.docker.vmnetd | /usr/bin/grep state | /usr/bin/tr -d '()')"
    scriptLogging "com.docker.vmnetd $vmnetd_status"
fi

# Docker companion, Kitematic install
if [ "$install_kitematic" = yes ]; then
    scriptLogging "Download kitematic anyway. Should use better way...Any idea?"
    /usr/bin/curl --silent -o "${workdir}/$kitematic_zip" $kitematic_dlurl
    if [ -f "${workdir}/$kitematic_zip" ]; then
        /usr/bin/unzip -q "${workdir}/$kitematic_zip" -d "$workdir"
    else
        scriptLogging "Failed to get Kitematic.app" 2
        /bin/rm -rf "$workdir"
        exit 1
    fi

    scriptLogging "Check version of kitematic"
    new_kitematic_ver="$( /usr/libexec/PlistBuddy -c "print CFBundleShortVersionString" "${workdir}/Kitematic.app/Contents/Info.plist")"
    if [ -z "$new_kitematic_ver" ]; then
        scriptLogging "Unknown Type of Kitematic!" 2
        scriptLogging "Abort!" 2
        /bin/rm -rf "$workdir"
        exit 1
    fi

    if [ "$forced" = yes ]; then killKitematic; fi

    if [ -d "$kitematicapp" ]; then
        current_kitematic_ver="$( /usr/libexec/PlistBuddy -c "print CFBundleShortVersionString" "${kitematicapp}/Contents/Info.plist")"
        if [ "$current_kitematic_ver" = "$new_kitematic_ver" ]; then
            do_install=no
            scriptLogging "Already same version installed: $current_kitematic_ver"
            scriptLogging "Nothing to do for $kitematicapp."
        else
            do_install=yes
            killKitematic
        fi
    else
         do_install=yes
    fi

    if [ "$do_install" = yes ]; then
        result="$( checkapp "${workdir}/Kitematic.app" "$docker_devid")"
        if [ "$result" = ok ]; then
            scriptLogging "Kitematic.app: check passed."
        else
            scriptLogging "$result" 2
            /bin/rm -rf "$workdir"
            exit 1
        fi
        scriptLogging "Install Kitematic version: $new_kitematic_ver"
        scriptLogging "Copy Kitematic.app into /Applicaitons"
        /bin/cp -af "${workdir}/Kitematic.app" "$kitematicapp"
        scriptLogging "Remove com.apple.quarantine from $kitematicapp"
        /usr/bin/xattr -r -d com.apple.quarantine "$kitematicapp"
    fi
fi
/bin/rm -rf "$workdir"
scriptLogging "Done."
exit 0
