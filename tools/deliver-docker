#!/bin/bash
# MIT License
#
# Copyright (c) 2018 Takanori TANIGUCHI
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#-
#- deliver-docker [-k] [-f] [-v] [-h]
#-  f: Force install/update
#-  k: Install/update kitematic.app too
#-  v: Verbose mode
#-  h: Show this message.
#-

docker_dlurl="https://download.docker.com/mac/stable/Docker.dmg"
docker_dmg="$( basename "$docker_dlurl" )"
dockerapp=/Applications/Docker.app
dockervmnetd="${dockerapp}/Contents/Library/LaunchServices/com.docker.vmnetd"
dockerplist="${dockerapp}/Contents/Resources/com.docker.vmnetd.plist"
plistfile="$( /usr/bin/basename "$dockerplist" )"

kitematic_dlurl="https://download.docker.com/kitematic/Kitematic-Mac.zip"
kitematic_zip="$( basename "$kitematic_dlurl" )"
kitematicapp=/Applications/Kitematic.app

verbose=off
forced=no

function sinkDocker(){
    $re killall Docker
    /usr/bin/killall Docker 2> /dev/null
    $re killall com.docker.supervisor
    /usr/bin/killall com.docker.supervisor 2> /dev/null
    $re killall com.docker.hyperkit
    /usr/bin/killall com.docker.hyperkit 2> /dev/null
    $re remove "$dockerapp"
    /bin/rm -rf "$dockerapp"
    $re remove "$dockerplist"
    /bin/rm -rf "$dockerplist"
    $re remove "$dockervmnetd"
    /bin/rm -rf "$dockervmnetd"
    $re "remove $( /usr/bin/stat -l /usr/local/bin/* | grep "$dockerapp" | awk '{print $(NF -2)}' )"
    /bin/rm -f $( /usr/bin/stat -l /usr/local/bin/* | grep "$dockerapp" | awk '{print $(NF -2)}' )
    $re remove user config dir.
    /bin/rm -rf /Users/*/.docker
}

# For Jamf support
if [ "$4" = kitematic ]; then install_kitematic=yes; fi
if [ "$5" = "1" ]; then forced=yes; fi

while getopts fkv sw
do
    case $sw in
    "f" )
        forced=yes
        ;;
    "k" )
        install_kitematic=yes
        ;;
    "v" )
        verbose=on
        ;;
    * )
        grep ^#- "$0" | cut -c 4-
        exit 0
        ;;
   esac
done

if [ "$verbose" = off ]; then
    curl_opt='--silent'
    unzip_opt='-q'
    hdiutil_opt='-quiet'
    re=":"
else
    curl_opt='--verbose'
    unzip_opt=''
    hdiutil_opt='-verbose'
    re="echo"
fi

$re "verbose mode: $verbose"
$re "Force install: $forced"

if [ "$forced" = yes ]; then sinkDocker; fi
if [ -d "$dockerapp" ]; then
    $re "current_dockerver: $current_dockerver"
    current_dockerver="$( /usr/libexec/PlistBuddy -c "print CFBundleShortVersionString" "${dockerapp}/Contents/Info.plist" )"
else
    $re Install fresh Docker
    current_dockerver="X"
fi

workdir="$( /usr/bin/mktemp -d )"
eval /usr/bin/curl "$curl_opt" -o "${workdir}/$docker_dmg" $docker_dlurl
if [ ! -f "${workdir}/$docker_dmg" ]; then
    echo "Failed to download $docker_dmg"
    exit 1
fi

devfile="$( eval /usr/bin/hdiutil attach -nobrowse "${workdir}/$docker_dmg" | grep Docker | awk '{print $1}' )"
dmg_dockerver="$( /usr/libexec/PlistBuddy -c "print CFBundleShortVersionString" /Volumes/Docker/Docker.app/Contents/Info.plist )"

if [ "$dmg_dockerver" = "$current_dockerver" ]; then
    $re Already same version installed: $current_dockerver
    $re "Nothing to do for $dockerapp."
    /usr/bin/hdiutil detach "$hdiutil_opt" "$devfile"
else
    if [ "$forced" = no ]; then
        sinkDocker
    fi

    $re copy Docker into /Applications
    /bin/cp -af /Volumes/Docker/Docker.app "$dockerapp"
    /usr/bin/hdiutil detach "$hdiutil_opt" "$devfile"
    $re remove com.apple.quarantine from "$dockerapp"
    /usr/bin/xattr -r -d com.apple.quarantine "$dockerapp"
    $re fix ownership
    /usr/sbin/chown -R 0:80 "$dockerapp"

    if [ -f "$dockerplist" ]; then
        $re copy "$dockerplist" into /Library/LaunchDaemons/
        /bin/cp -af "$dockerplist" /Library/LaunchDaemons/

        $re "Check if there is vmnetd version in plist. This is very important."
        plist_dockervmnetd_ver="$( /usr/libexec/PlistBuddy -c "print Version" "/Library/LaunchDaemons/$plistfile" 2> /dev/null )"
        info_dockervmnetd_ver="$( /usr/libexec/PlistBuddy -c "print VmnetdVersion" "${dockerapp}/Contents/Info.plist" 2> /dev/null )"
        $re "plist_dockervmnetd_ver: $plist_dockervmnetd_ver"
        $re "info_dockervmnetd_ver: $info_dockervmnetd_ver"
        if [ -z "$plist_dockervmnetd_ver" ]; then
            if [ -z "$info_dockervmnetd_ver" ]; then
                echo "Unknown Type of Docker!" >&2
                echo "Abort!" >&2
                exit 1
            fi
            $re "set $info_dockervmnetd_ver into $plistfile"
            /usr/libexec/PlistBuddy -c "add Version string $info_dockervmnetd_ver" "/Library/LaunchDaemons/$plistfile"
        elif [ "$plist_dockervmnetd_ver" != "$info_dockervmnetd_ver" ]; then
            $re "Update $info_dockervmnetd_ver into $plistfile"
            /usr/libexec/PlistBuddy -c "set Version string $info_dockervmnetd_ver" "/Library/LaunchDaemons/$plistfile"
        fi

        $re fix file mode to 644 : "/Library/LaunchDaemons/$plistfile"
        /bin/chmod 644 "/Library/LaunchDaemons/$plistfile"
        $re fix ownership: "/Library/LaunchDaemons/$plistfile"
        /usr/sbin/chown 0:0 "/Library/LaunchDaemons/$plistfile"
        $re make Apple binary: "/Library/LaunchDaemons/$plistfile"
        /usr/bin/plutil -convert binary1 "/Library/LaunchDaemons/$plistfile"
    else
        echo "Cancel to aboard. Not boarding pass($dockerplist) found." >&2
        exit 1
    fi

    /bin/mkdir -p /usr/local/bin /Library/PrivilegedHelperTools
    if [ -f "$dockervmnetd" ]; then
        $re Copy "$dockervmnetd" into /Library/PrivilegedHelperTools/
        /bin/cp -af "$dockervmnetd" /Library/PrivilegedHelperTools/
    fi

    $re Start vmnetd.
    vmnetdStatus="$( /bin/launchctl list | /usr/bin/grep -c "$( /usr/bin/basename "$plistfile" .plist )" )"
    if [ "${vmnetdStatus:-0}" -eq 0 ]; then
        /bin/launchctl load -w "/Library/LaunchDaemons/$plistfile"
    else
        /bin/launchctl stop "/Library/LaunchDaemons/$plistfile"
        /bin/launchctl start "/Library/LaunchDaemons/$plistfile"
    fi
    $re "$( /bin/launchctl list | /usr/bin/grep "$( /usr/bin/basename "$plistfile" .plist )" )"
fi

# Docker companion, Kitematic
if [ "${install_kitematic:-no}"  = yes ]; then
    if [ "$forced" = yes ]; then
        $re killall Kitematic
        /usr/bin/killall Kitematic 2> /dev/null
        $re remove "$kitematicapp"
        /bin/rm -rf "$kitematicapp"
    fi

    $re Install Kitematic.
    eval /usr/bin/curl "$curl_opt" -o "${workdir}/$kitematic_zip" $kitematic_dlurl
    if [ -f "${workdir}/$kitematic_zip" ]; then
        eval unzip $unzip_opt "${workdir}/$kitematic_zip" -d "$workdir"
    else
        echo "Failed to get Kitematic.app"
        exit 1
    fi

    new_kitematic_ver="$( /usr/libexec/PlistBuddy -c "print CFBundleShortVersionString" "${workdir}/Kitematic.app/Contents/Info.plist" )"
    if [ -z "$new_kitematic_ver" ]; then
        echo "Unknown Type of Kitematic!" >&2
        echo "Abort!" >&2
        exit 1
    fi
    $re "new_kitematic_ver: $new_kitematic_ver"

    if [ -d "$kitematicapp" ]; then
        current_kitematic_ver="$( /usr/libexec/PlistBuddy -c "print CFBundleShortVersionString" "${kitematicapp}/Contents/Info.plist" )"
        if [ "$current_kitematic_ver" = "$new_kitematic_ver" ]; then
            $re "Already same version installed: $current_kitematic_ver"
            $re "Nothing to do for $kitematicapp."
            do_install=no
        else
            $re killall Kitematic
            /usr/bin/killall Kitematic 2> /dev/null
            $re remove "$kitematicapp"
            /bin/rm -rf "$kitematicapp"
            do_install=yes
        fi
    else
         do_install=yes
    fi

    if [ "${do_install:-no}" = yes ]; then
        $re copy Kitematic.app into /Applicaitons
        /bin/cp -af "${workdir}/Kitematic.app" "$kitematicapp"
        $re remove com.apple.quarantine from "$kitematicapp"
        /usr/bin/xattr -r -d com.apple.quarantine "$kitematicapp"
    fi
fi
rm -rf "$workdir"
$re Done.
