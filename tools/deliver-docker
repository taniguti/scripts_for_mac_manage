#!/bin/bash
# MIT License
#
# Copyright (c) 2018 Takanori TANIGUCHI
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#-
#- deliver-docker [-k] [-f] [-v] [-h]
#-  f: Force re-install/update
#-  k: Install/update kitematic.app too
#-  v: Verbose mode
#-  h: Show this message.
#-
#- If you use this script with JamfPro,
#-   Parm 4: set to "kitematic", install Kitematic.app too. (case sensitive)
#-   Parm 5: set to 1, force re-install/update.
#-

docker_dlurl="https://download.docker.com/mac/stable/Docker.dmg"
docker_dmg="$( /usr/bin/basename "$docker_dlurl" )"
dockerapp=/Applications/Docker.app
dockervmnetd="${dockerapp}/Contents/Library/LaunchServices/com.docker.vmnetd"
dockerplist="${dockerapp}/Contents/Resources/com.docker.vmnetd.plist"
plistfile="/Library/LaunchDaemons/$( /usr/bin/basename "$dockerplist" )"

kitematic_dlurl="https://download.docker.com/kitematic/Kitematic-Mac.zip"
kitematic_zip="$( /usr/bin/basename "$kitematic_dlurl" )"
kitematicapp=/Applications/Kitematic.app

verbose=off
forced=no

function sinkDocker(){
    $CMT "sink Docker"
    /usr/bin/killall Docker 2> /dev/null
    $CMT "make system/com.docker.vmnetd disabled"
    /bin/launchctl kill QUIT system/com.docker.vmnetd
    /bin/launchctl unload -w "$plistfile"
    $CMT "remove $dockerapp"
    /bin/rm -rf "$dockerapp"
    $CMT "remove Launchd plist file: $plistfile"
    /bin/rm -f "$plistfile"
    $CMT "remove PrivilegedHelperTools: /Library/PrivilegedHelperTools/$( /usr/bin/basename "$dockervmnetd" )"
    /bin/rm -f "/Library/PrivilegedHelperTools/$( /usr/bin/basename "$dockervmnetd" )"
    docker_cmds="$( /usr/bin/stat -q -l /usr/local/bin/* | /usr/bin/grep "$dockerapp" | /usr/bin/awk '{print $(NF -2)}' | /usr/bin/tr '\n' ' ' )"
    if [ ! -z "$docker_cmds" ]; then
        $CMT "remove $docker_cmds"
        /bin/rm -f $docker_cmds
    fi
}

function killKitematic(){
    $CMT kill Kitematic
    /usr/bin/killall Kitematic 2> /dev/null
    $CMT remove "$kitematicapp"
    /bin/rm -rf "$kitematicapp"
}

# For Jamf support
if [ x"$4" = xkitematic ]; then install_kitematic=yes; fi
if [ x"$5" = x1 ]; then forced=yes; fi

while getopts fkv sw
do
    case $sw in
    "f" )
        forced=yes
        ;;
    "k" )
        install_kitematic=yes
        ;;
    "v" )
        verbose=on
        ;;
    * )
        /usr/bin/grep ^#- "$0" | cut -c 4-
        exit 0
        ;;
   esac
done

if [ "$verbose" = off ]; then
    curl_opt='--silent'
    unzip_opt='-q'
    hdiutil_opt='-quiet'
    CMT=":"
else
    # debug for download with curl
    #curl_opt='--verbose'
    curl_opt=''
    unzip_opt=''
    hdiutil_opt='-verbose'
    CMT="eval echo \$( /bin/date +'%F %T'):"
fi

$CMT "verbose mode: $verbose"
$CMT "Force install: $forced"

if [ "$forced" = yes ]; then sinkDocker; fi
if [ -d "$dockerapp" ]; then
    current_dockerver="$( /usr/libexec/PlistBuddy -c "print CFBundleShortVersionString" "${dockerapp}/Contents/Info.plist" )"
    $CMT "current docker version: $current_dockerver"
else
    current_dockerver="X"
    $CMT Install fresh Docker
fi

workdir="$( /usr/bin/mktemp -d )"
eval /usr/bin/curl "$curl_opt" -o "${workdir}/$docker_dmg" $docker_dlurl
if [ ! -f "${workdir}/$docker_dmg" ]; then
    echo "Failed to download $docker_dmg"
    exit 1
fi

devfile="$( eval /usr/bin/hdiutil attach -nobrowse "${workdir}/$docker_dmg" | /usr/bin/grep Docker | /usr/bin/awk '{print $1}' )"
dmg_dockerver="$( /usr/libexec/PlistBuddy -c "print CFBundleShortVersionString" /Volumes/Docker/Docker.app/Contents/Info.plist )"

if [ "$dmg_dockerver" = "$current_dockerver" ]; then
    $CMT Already same version installed: $current_dockerver
    $CMT "Nothing to do for $dockerapp."
    /usr/bin/hdiutil detach "$hdiutil_opt" "$devfile"
else
    if [ "$forced" = no ]; then
        sinkDocker
    fi

    $CMT "Install Docker version: $dmg_dockerver"
    $CMT copy Docker into /Applications
    /bin/cp -af /Volumes/Docker/Docker.app "$dockerapp"
    /usr/bin/hdiutil detach "$hdiutil_opt" "$devfile"
    $CMT remove com.apple.quarantine from "$dockerapp"
    /usr/bin/xattr -r -d com.apple.quarantine "$dockerapp"
    $CMT fix ownership
    /usr/sbin/chown -R 0:80 "$dockerapp"

    if [ -f "$dockerplist" ]; then
        $CMT "copy $dockerplist to $plistfile"
        /bin/cp -af "$dockerplist" "$plistfile"

        $CMT "Check if there is vmnetd version in plist. This is very important."
        plist_dockervmnetd_ver="$( /usr/libexec/PlistBuddy -c "print Version" "$plistfile"  2> /dev/null )"
        info_dockervmnetd_ver="$( /usr/libexec/PlistBuddy -c "print VmnetdVersion" "${dockerapp}/Contents/Info.plist" 2> /dev/null )"
        $CMT "plist_dockervmnetd_ver: $plist_dockervmnetd_ver"
        $CMT "info_dockervmnetd_ver: $info_dockervmnetd_ver"
        if [ -z "$plist_dockervmnetd_ver" ]; then
            if [ -z "$info_dockervmnetd_ver" ]; then
                echo "Unknown Type of Docker!" >&2
                echo "Abort!" >&2
                exit 1
            fi
            $CMT "set $info_dockervmnetd_ver into $plistfile"
            /usr/libexec/PlistBuddy -c "add Version string $info_dockervmnetd_ver" "$plistfile"
        elif [ "$plist_dockervmnetd_ver" != "$info_dockervmnetd_ver" ]; then
            $CMT "Update $info_dockervmnetd_ver into $plistfile"
            /usr/libexec/PlistBuddy -c "set Version string $info_dockervmnetd_ver" "$plistfile"
        fi

        $CMT fix file mode to 644 : "$plistfile"
        /bin/chmod 644 "$plistfile"
        $CMT fix ownership: "$plistfile"
        /usr/sbin/chown 0:0 "$plistfile"
        $CMT make Apple binary: "$plistfile"
        /usr/bin/plutil -convert binary1 "$plistfile"
    else
        echo "Cancel to aboard. Not boarding pass($dockerplist) found." >&2
        exit 1
    fi

    /bin/mkdir -p /usr/local/bin /Library/PrivilegedHelperTools
    if [ -f "$dockervmnetd" ]; then
        $CMT Copy "$dockervmnetd" into /Library/PrivilegedHelperTools/
        /bin/cp -af "$dockervmnetd" /Library/PrivilegedHelperTools/
    else
        echo "Unknown Type of Docker! Not found $dockervmnetd" >&2
        echo "Abort!" >&2
        exit 1
    fi

    /bin/launchctl load -w "$plistfile"
    vmnetd_status="$( /bin/launchctl print  system/com.docker.vmnetd | /usr/bin/grep state | /usr/bin/tr -d '()' )"
    $CMT "com.docker.vmnetd $vmnetd_status"
fi

# Docker companion, Kitematic
if [ "${install_kitematic:-no}"  = yes ]; then
    $CMT "download kitematic anyway. Should use better way..."
    eval /usr/bin/curl "$curl_opt" -o "${workdir}/$kitematic_zip" $kitematic_dlurl
    if [ -f "${workdir}/$kitematic_zip" ]; then
        eval unzip $unzip_opt "${workdir}/$kitematic_zip" -d "$workdir"
    else
        echo "Failed to get Kitematic.app"
        exit 1
    fi

    $CMT "Check version of kitematic"
    new_kitematic_ver="$( /usr/libexec/PlistBuddy -c "print CFBundleShortVersionString" "${workdir}/Kitematic.app/Contents/Info.plist" )"
    if [ -z "$new_kitematic_ver" ]; then
        echo "Unknown Type of Kitematic!" >&2
        echo "Abort!" >&2
        exit 1
    fi

    if [ "$forced" = yes ]; then killKitematic; fi

    if [ -d "$kitematicapp" ]; then
        current_kitematic_ver="$( /usr/libexec/PlistBuddy -c "print CFBundleShortVersionString" "${kitematicapp}/Contents/Info.plist" )"
        if [ "$current_kitematic_ver" = "$new_kitematic_ver" ]; then
            do_install=no
            $CMT "Already same version installed: $current_kitematic_ver"
            $CMT "Nothing to do for $kitematicapp."
        else
            do_install=yes
            killKitematic
        fi
    else
         do_install=yes
    fi

    if [ "${do_install:-no}" = yes ]; then
        $CMT "Install Kitematic version: $new_kitematic_ver"
        $CMT copy Kitematic.app into /Applicaitons
        /bin/cp -af "${workdir}/Kitematic.app" "$kitematicapp"
        $CMT remove com.apple.quarantine from "$kitematicapp"
        /usr/bin/xattr -r -d com.apple.quarantine "$kitematicapp"
    fi
fi
rm -rf "$workdir"
$CMT Done.
