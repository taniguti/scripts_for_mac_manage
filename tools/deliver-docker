#!/bin/bash
# MIT License
#
# Copyright (c) 2018 Takanori TANIGUCHI
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#-
#- deliver-docker [-k] [-v] [-h]
#-  k: Install kitematic.app
#-  v: Verbose mode
#-  h: Show this message.
#-

docker_dlurl="https://download.docker.com/mac/stable/Docker.dmg"
docker_dmg="$( basename "$docker_dlurl" )"
dockerapp=/Applications/Docker.app
dockervmnetd="${dockerapp}/Contents/Library/LaunchServices/com.docker.vmnetd"
dockerplist="${dockerapp}/Contents/Resources/com.docker.vmnetd.plist"
plistfile="$( /usr/bin/basename "$dockerplist" )"

kitematic_dlurl="https://download.docker.com/kitematic/Kitematic-Mac.zip"
kitematic_zip="$( basename "$kitematic_dlurl" )"
kitematicapp=/Applications/Kitematic.app

# For Jamf support
if [ "$4" = kitematic ]; then install_kitematic=yes; fi

while getopts kv sw
do
    case "$sw" in
    "k" )
        install_kitematic=yes
        ;;
    "v" )
        verbose=1
        ;;
    * )
        grep ^#- "$0" | cut -c 4-
        exit 0
        ;;
   esac
done

if [ "${verbose:-0}" -eq 0 ]; then
    curl_opt='-s'
    unzip_opt='-q'
else
    curl_opt=''
    unzip_opt=''
fi

if [ -d "$dockerapp" ]; then
    current_dockerver="$( /usr/libexec/PlistBuddy -c "print CFBundleShortVersionString" "${dockerapp}/Contents/Info.plist" )"
else
    current_dockerver="X"
fi

workdir="$( /usr/bin/mktemp -d )"
eval /usr/bin/curl "$curl_opt" -o "${workdir}/$docker_dmg" $docker_dlurl
if [ ! -f "${workdir}/$docker_dmg" ]; then
    echo "Failed to download $docker_dmg"
    exit 1
fi

devfile="$( /usr/bin/hdiutil attach "${workdir}/$docker_dmg" -nobrowse | grep Docker | awk '{print $1}' )"
dmg_dockerver="$( /usr/libexec/PlistBuddy -c "print CFBundleShortVersionString" /Volumes/Docker/Docker.app/Contents/Info.plist )"

if [ "$dmg_dockerver" = "$current_dockerver" ]; then
    # Already same version installed.
    # Nothing to do for docker.app.
    /usr/bin/hdiutil detach "$devfile"
else
    /usr/bin/killall Docker
    /usr/bin/killall com.docker.supervisor
    /usr/bin/killall com.docker.hyperkit

    /bin/rm -rf "$dockerapp"
    /bin/cp -af /Volumes/Docker/Docker.app "$dockerapp"
    /usr/bin/hdiutil detach "$devfile"
    /usr/bin/xattr -r -d com.apple.quarantine "$dockerapp"
    /usr/sbin/chown -R 0:80 "$dockerapp"

    if [ -f "$dockerplist" ]; then
        /bin/cp -af "$dockerplist" /Library/LaunchDaemons/

        # Check if there is vmnetd version in plist. This is very important.
        plist_dockervmnetd_ver="$( /usr/libexec/PlistBuddy -c "print Version" "/Library/LaunchDaemons/$plistfile" 2> /dev/null )"
        info_dockervmnetd_ver="$( /usr/libexec/PlistBuddy -c "print VmnetdVersion" "${dockerapp}/Contents/Info.plist" 2> /dev/null )"
        if [ -z "$plist_dockervmnetd_ver" ]; then
            if [ -z "$info_dockervmnetd_ver" ]; then
                echo "Unknown Type of Docker!" >&2
                echo "Abort!" >&2
                exit 1
            fi
            /usr/libexec/PlistBuddy -c "add Version string $info_dockervmnetd_ver" "/Library/LaunchDaemons/$plistfile"
        elif [ "$plist_dockervmnetd_ver" != "$info_dockervmnetd_ver" ]; then
            /usr/libexec/PlistBuddy -c "set Version string $info_dockervmnetd_ver" "/Library/LaunchDaemons/$plistfile"
        fi

        /bin/chmod 644 "/Library/LaunchDaemons/$plistfile"
        /usr/sbin/chown 0:0 "/Library/LaunchDaemons/$plistfile"
        /usr/bin/plutil -convert binary1 "/Library/LaunchDaemons/$plistfile"
    else
        echo "Cancel to aboard. Not boarding pass($dockerplist) found." >&2
        exit 1
    fi

    /bin/mkdir -p /usr/local/bin /Library/PrivilegedHelperTools
    if [ -f "$dockervmnetd" ]; then
        /bin/cp -af "$dockervmnetd" /Library/PrivilegedHelperTools/
    fi

    vmnetdStatus="$( /bin/launchctl list | /usr/bin/grep -c "$( /usr/bin/basename "$plistfile" .plist )" )"
    if [ "${vmnetdStatus:-0}" -eq 0 ]; then
        /bin/launchctl load -w "/Library/LaunchDaemons/$plistfile"
    else
        /bin/launchctl stop "/Library/LaunchDaemons/$plistfile"
        /bin/launchctl start "/Library/LaunchDaemons/$plistfile"
    fi
fi

# Docker companion, Kitematic
if [ "${install_kitematic:-no}"  = yes ]; then
    eval /usr/bin/curl "$curl_opt" -o "${workdir}/$kitematic_zip" $kitematic_dlurl
    if [ -f "${workdir}/$kitematic_zip" ]; then
        eval unzip $unzip_opt "${workdir}/$kitematic_zip" -d "$workdir"
    else
        echo "Failed to get Kitematic.app"
        exit 1
    fi
fi

if [ -d "$kitematicapp" ]; then
    /usr/bin/xattr -r -d com.apple.quarantine "$kitematicapp"
fi

rm -rf "$workdir"
