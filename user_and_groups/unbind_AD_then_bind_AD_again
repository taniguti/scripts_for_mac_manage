#!/bin/bash
# vim: set ts=4 sw=4 sts=0 et ft=sh fenc=utf-8 ff=unix :
#-
#- Usage
#- -----
#- sudo ./unbind_AD_then_bind_AD_again ActiveDirectory_bind_credential Salt_for_ActiveDirectory_bind_credential ActiveDirectory_domain_name
#-
#- ActiveDirectory_bind_credential must be encrypted.
#-
##-----------
## How to create ActiveDirectory_bind_credential.
##-----------
##  Get Salt string.
##   $ /usr/bin/openssl rand -hex 8
##   5441e9434026ffd6
##
## Create ActiveDirectory_bind_credential with Salt and domain name to bind.
##
## - Bind user: ladmin
## - Bind user password: hogepiyo
## - domain name to bind: vmnet3.local
##
## $ echo "ladmin hogepiyo" | /usr/bin/openssl enc -aes256 -a -A -S 5441e9434026ffd6 -k vmnet3.local
## U2FsdGVkX19UQelDQCb/1iVrsblTiCdzO9JK5eRXCcJpWGJPMC4DbH/trZGcCaHU
##
## The 'U2FsdGVkX19UQelDQCb/1iVrsblTiCdzO9JK5eRXCcJpWGJPMC4DbH/trZGcCaHU' is ActiveDirectory_bind_credential.
##

iam="$(whoami)"

function scriptlogger() {
    local logfile scriptname timestamp label mode
    logfile="/tmp/unbind_AD_then_bind_AD.log"
    scriptname="$(/usr/bin/basename "$0")"
    timestamp="$(/bin/date "+%F %T")"
    mode="$2"
    case "${mode:-1}" in
        2)
            label="[error]"
            echo "$timestamp $scriptname $label $1" | /usr/bin/tee -a "$logfile"
            ;;
        *)
            label="[info]"
            echo "$timestamp $scriptname $label $1" | /usr/bin/tee -a "$logfile"
            ;;
    esac
}

function usage() {
    grep "^#-" "$0" | cut -c 4-
}

if [ "$iam" != root ]; then
    usage
    exit 1
fi

# Jamf support
if [ "$1" = '/' ]; then
    shift 3
fi

credentialstring="$1"
salt="$2"
domaintobind="$3"

if [ -z "$credentialstring" ] || [ -z "$salt" ] || [ -z "$domaintobind" ]; then
    usage
    exit 1
else
    scriptlogger "credentialstring: $credentialstring"
    scriptlogger "salt: (I got it.)"
    scriptlogger "Domain to bind: $domaintobind"
fi

string="$(echo "$credentialstring" | /usr/bin/openssl enc -aes256 -d -a -A -S "$salt" -k "$domaintobind")"
if [ -z "$string" ]; then
    scriptlogger "Could not decrypt $credentialstring" 2
    exit 1
fi

ADADMIN="$(echo "$string" | awk '{print $1}')"
ADADMINPASS="$(echo "$string" | awk '{print $2}')"

computerName="$(dsconfigad -show | grep 'Computer Account' | awk '{print $NF}' | tr -d '$')"
if [ -z "$computerName" ]; then
    # Jamf argument #2 is computer name.
    computerName="$2"
    bound=no
else
    bound=yes
fi

scriptlogger "ComputerID: $computerName"
if [ "$computerName" != "$(systemsetup -getlocalsubnetname | awk '{print $NF}')" ]; then
    scriptlogger "Set computer name to ${computerName}."
    systemsetup -setcomputername "$computerName"
    systemsetup -setlocalsubnetname "$(echo "$computerName" | tr "[:upper:]" "[:lower:]")"
fi

scriptlogger "Check if connectability to active directory domain..."
status=NG
for s in $(dig _ldap._tcp."$domaintobind" srv +short | awk '{print $NF}'); do
    if nc -w 1 "$s" 389; then
        scriptlogger "Access check passed: $s TCP/389"
        status=OK
        break
    else
        scriptlogger "Timeout: $s TCP/389" 2
        status=NG
    fi
done

if [ "$status" != OK ]; then
    scriptlogger "Abort due to failed to talk with Active Directory domain server." 2
    exit 1
fi

if [ "$bound" = yes ]; then
    logmsg="$(dsconfigad -leave 2>&1)"
    if [ -n "$logmsg" ]; then
        scriptlogger "$logmsg" 2
        exit 1
    fi
fi

logmsg="$(
    dsconfigad -add "${domaintobind}" \
        -username "${ADADMIN}" \
        -password "${ADADMINPASS}" \
        -force \
        -computer "$computerName" 2>&1
)"
if [ -n "$logmsg" ]; then
    scriptlogger "$logmsg" 2
    exit 1
fi

dsconfigad -alldomains disable \
    -localhome enable \
    -mobile enable \
    -mobileconfirm disable \
    -namespace domain \
    -preferred "${domaintobind}" \
    -restrictDDNS en99 \
    -enablesso 2>&1

odutil reset cache
scriptlogger "Executed 'odutil reset cache'."
scriptlogger "Done."
